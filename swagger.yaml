swagger: "2.0"
info:
  description: "This Api is to be used by Humanify Neighborhood applications"
  version: "1"
  title: "Humanify Neighborhood API"
  termsOfService: "https://github.com/DavidGalvanDom/HuN-TTEC/"
  contact:
    email: "david.galvan@ttec.com"
host: "github.com/DavidGalvanDom/HuN-TTEC"
basePath: "/"
tags:
  - name: "token"
    description: "Client authentication."
  - name: "users"
    description: "Operations about users."
  - name: "meesagesboard"
    description: "Operations about messages board."
  - name: "groups"
    description: "Operations about groups."
schemes:
  - "https"
  - "http"
paths:
  /api/v1/token:
    post:
      tags:
        - "token"
      summary: "Client authentication"
      description: ""
      operationId: "token"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Client information need to create the token"
          required: true
          schema:
            $ref: "#/definitions/Token"
      responses:
        "200":
          description: "Success"
  /api/v1/users/{employee_number}/information:
    get:
      tags:
        - "users"
      summary: "Retrieve a user’s general information"
      description: ""
      operationId: "userssettings"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "employee_number"
          description: "Employee number "
          required: true
          type: "string"
        - in: "header"
          name: Accept-Language
          type: string
          enum: [en-US, es-MX, hi-IN]
          required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserGeneralDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "Employee not found"
      security:
        - api_key: []
  /api/v1/users/{user_id}/status:
    get:
      tags:
        - "users"
      summary: "Retrieve a user’s satus"
      description: ""
      operationId: "userstatus"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "Employee not found"
      security:
        - api_key: []
    put:
      tags:
        - "users"
      summary: "Update a user’s status"
      description: ""
      operationId: "updateuserstatus"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "User not found"
      security:
        - api_key: []
  /api/v1/users/{user_id}/mood:
    get:
      tags:
        - "users"
      summary: "Retrieve a user’s mood"
      description: ""
      operationId: "usersmood"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "Employee not found"
      security:
        - api_key: []
    put:
      tags:
        - "users"
      summary: "Update a user’s mood"
      description: ""
      operationId: "updateusersmood"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "User not found"
      security:
        - api_key: []
  /api/v1/users/{user_id}/deskview:
    get:
      tags:
        - "users"
      summary: "Retrieve a user’s desk view"
      description: ""
      operationId: "usersdesk view"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "Employee not found"
      security:
        - api_key: []
    put:
      tags:
        - "users"
      summary: "Update a user’s desk view"
      description: ""
      operationId: "updateusersdeskview"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "User not found"
      security:
        - api_key: []
  /api/v1/users/{user_id}/deskitem:
    get:
      tags:
        - "users"
      summary: "Retrieve a user’s desk items"
      description: ""
      operationId: "deskitem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "Employee not found"
      security:
        - api_key: []
    put:
      tags:
        - "users"
      summary: "Update a user’s desk items"
      description: ""
      operationId: "updatedeskitem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "User not found"
      security:
        - api_key: []
  /api/v1/users/{user_id}/favorites:
    get:
      tags:
        - "users"
      summary: "Retrieve a user’s favorites list"
      description: ""
      operationId: "favorites"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "Employee not found"
      security:
        - api_key: []
    put:
      tags:
        - "users"
      summary: "Update a user’s favorites"
      description: ""
      operationId: "updatefavorites"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "User not found"
      security:
        - api_key: []
  /api/v1/groups:
    get:
      tags:
        - "groups"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "400":
          description: "Invalid employee number supplied"
          schema:
            $ref: "#/definitions/ProblemDetailsDTO"
        "404":
          description: "Employee not found"
      security:
        - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Token:
    type: "object"
    properties:
      clientId:
        type: "string"
      secretId:
        type: "string"
  UserGeneralDTO:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      employeeNumber:
        type: "string"
      clientName:
        type: "string"
      programName:
        type: "string"
      projectName:
        type: "string"
      maganerId:
        type: "integer"
        format: "int64"
      phoneNumber:
        type: "string"
      title:
        type: "string"
      mood:
        type: "string"
      status:
        type: "string"
      teamId:
        type: "integer"
        format: "int64"
      deskView:
        $ref: "#/definitions/DeskviewDTO"
      deskItems:
        $ref: "#/definitions/DeskItemsDTO"
      favourites:
        type: "array"
        items:
          $ref: "#/definitions/FavouritDTO"
      userRoles:
        type: "array"
        items:
          $ref: "#/definitions/UserRoleDTO"
      userPermissions:
        type: "array"
        items:
          $ref: "#/definitions/UserPermissionDTO"
      tenantUserDetails:
        type: "array"
        items:
          $ref: "#/definitions/TenantDetailsDTO"
      appConfigUserDetails:
        type: "array"
        items:
          $ref: "#/definitions/AppConfigDetailsDTO"
  UserPermissionDTO:
    type: "object"
    properties:
      permissionId:
        type: "integer"
      permissionName:
        type: "string"
  UserProfileDTO:
    type: "object"
    properties:
      userMoodId:
        type: "integer"
        format: "int64"
      userStatusId:
        type: "integer"
        format: "int64"
      uiConfig:
        $ref: "#/definitions/UIConfigDTO"
  UserGroupsDTO:
    type: "object"
    properties:
      groupId:
        type: "integer"
        format: "int64"
      groupName:
        type: "string"
      groupType:
        type: "string"
      uiConfig:
        $ref: "#/definitions/GroupUIConfigDTO"
      channels:
        type: "array"
        items:
          $ref: "#/definitions/ChannelDTO"
  ChannelDTO:
    type: "object"
    properties:
      channelId:
        type: "integer"
        format: "int64"
      channelOwnerId:
        type: "integer"
        format: "int64"
      channelName:
        type: "string"
      channelType:
        type: "string"
  UIConfigDTO:
    type: "object"
    properties:
      deskView:
        $ref: "#/definitions/DeskviewDTO"
      deskitems:
        type: "array"
        items:
          $ref: "#/definitions/DeskItemsDTO"
      favourites:
        type: "array"
        items:
          $ref: "#/definitions/FavouritDTO"
  GroupUIConfigDTO:
    type: "object"
    properties:
      workSpaceId:
        type: "integer"
        format: "int64"
      viewLink:
        type: "string"
      slots:
        type: "array"
        items:
          $ref: "#/definitions/SlotDTO"
  DeskviewDTO:
    type: "object"
    properties:
      deskviewId:
        type: "integer"
        format: "int64"
      viewLink:
        type: "string"
  DeskItemsDTO:
    type: "object"
    properties:
      itemId:
        type: "integer"
        format: "int64"
      itemLink:
        type: "string"
      xCoordinate:
        type: "string"
      yCoordinate:
        type: "string"
  FavouritDTO:
    type: "object"
    properties:
      email:
        type: "string"
      name:
        type: "string"
      avatar:
        type: "string"
  ProblemDetailsDTO:
    type: "object"
    properties:
      type:
        type: "string"
      title:
        type: "string"
      status:
        type: "integer"
        format: "int64"
      detail:
        type: "string"
      instance:
        type: "string"
  UserRoleDTO:
    type: "object"
    properties:
      roleId:
        type: "integer"
        format: "int64"
      roleName:
        type: "string"
  TenantDetailsDTO:
    type: "object"
    properties:
      tenantId:
        type: "integer"
        format: "int64"
      tenantName:
        type: "string"
      tenantCode:
        type: "string"
  AppConfigDetailsDTO:
    type: "object"
    properties:
      assignmentId:
        type: "integer"
        format: "int64"
      defaultName:
        type: "string"
      asignmentValues:
        type: "array"
        items:
          $ref: "#/definitions/ConfigObjectDTO"
      childConfig:
        type: "array"
        items:
          $ref: "#/definitions/AppConfigDetailsDTO"
  ConfigObjectDTO:
    type: "object"
    properties:
      key:
        type: "string"
      value:
        type: "string"
  SlotDTO:
    type: "object"
    properties:
      slotId:
        type: "integer"
        format: "int64"
      workSpaceId:
        type: "integer"
        format: "int64"
      xCoordinate:
        type: "number"
        format: "double"
      yCoordinate:
        type: "number"
        format: "double"
      slotItems:
        type: "array"
        items:
          $ref: "#/definitions/SlotItemDTO"
  SlotItemDTO:
    type: "object"
    properties:
      itemId:
        type: "integer"
        format: "int64"
      slotId:
        type: "integer"
        format: "int64"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
